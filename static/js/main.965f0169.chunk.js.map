{"version":3,"sources":["components/ApodsStyled.js","components/DateRangeStyled.js","components/DateRange.js","components/Apods.js","App.js","index.js"],"names":["ApodsContainerStyled","styled","div","ApodContainerStyled","props","apodIdx","ApodInfoContainerStyled","ApodTitleStyled","ApodDateStyled","HeartStyled","Heart","liked","DateRangeWrapperStyled","css","TitleStyled","SubheadingStyled","DateRange","enteredDate","setEnteredDate","DateRangePicker","startText","endText","maxDate","Date","value","onChange","newDate","renderInput","startProps","endProps","Fragment","TextField","sx","background","Box","mx","Apod","rest","index","media_type","src","imgURL","alt","title","style","width","margin","height","frameBorder","allowFullScreen","date","dateLikesRef","onClick","dateLikesRefCopy","setDateLikes","handleClick","Apods","apods","dateLikes","length","map","apod","url","pastWeek","pastWeekDate","getDate","setDate","tzOffset","getTimezoneOffset","App","React","useState","setApods","useRef","isLoaded","setIsLoaded","error","setError","useEffect","startDate","toISOString","match","endDate","apodsAPIURL","fetchApod","a","fetch","method","mode","headers","response","json","data","ok","message","status","Promise","reject","forEach","current","hasOwnProperty","console","log","LocalizationProvider","dateAdapter","DateFnsAdapter","className","CircularProgress","position","top","left","rootElement","document","getElementById","ReactDOM","render"],"mappings":"qPAGMA,EAAuBC,IAAOC,IAAV,uEAKpBC,EAAsBF,IAAOC,IAAV,sPAOrB,SAACE,GAAD,OAA8B,IAAlBA,EAAMC,QAAgB,6BAA+B,QAI/DC,EAA0BL,IAAOC,IAAV,gIASvBK,EAAkBN,IAAOC,IAAV,8HASfM,EAAiBP,IAAOC,IAAV,iIASdO,EAAcR,YAAOS,IAAPT,CAAH,yhBA8Bb,SAACG,GAAD,OACAA,EAAMO,OAAN,iK,4CCzEEC,EAAyBX,YAAO,MAAPA,CAAcY,YAAd,4OAWzBC,EAAcb,YAAO,MAAPA,CAAcY,YAAd,ybAuBdE,EAAmBd,YAAO,MAAPA,CAAcY,YAAd,mE,OC5BV,SAASG,EAAT,GAAqD,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,eAC/C,OACE,eAACN,EAAD,WACE,eAACE,EAAD,0BAEE,cAACC,EAAD,kFAIF,cAACI,EAAA,EAAD,CACEC,UAAU,aACVC,QAAQ,WACRC,QAAS,IAAIC,KACbC,MAAOP,EACPQ,SAAU,SAACC,GACTR,EAAeQ,IAEjBC,YAAa,SAACC,EAAYC,GAAb,OACX,eAAC,IAAMC,SAAP,WACE,cAACC,EAAA,EAAD,aAAWC,GAAI,CAAEC,WAAY,SAAcL,IAC3C,cAACM,EAAA,EAAD,CAAKF,GAAI,CAAEG,GAAI,GAAf,kBACA,cAACJ,EAAA,EAAD,aAAWC,GAAI,CAAEC,WAAY,SAAcJ,aCpBvD,IAAMO,EAAO,SAAC,GAAiB,IAAZC,EAAW,oBAe5B,OACE,eAAClC,EAAD,CAAqBE,QAASgC,EAAKC,MAAnC,UACuB,UAApBD,EAAKE,WACJ,qBACEC,IAAKH,EAAKI,OACVC,IAAKL,EAAKM,MACVC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,YAEZ,UAApBT,EAAKE,WACP,wBACEC,IAAKH,EAAKI,OACVE,MAAON,EAAKM,MACZE,MAAM,OACNE,OAAO,QACPC,YAAY,IACZC,iBAAe,IAEf,KACJ,eAAC3C,EAAD,WACE,cAACC,EAAD,UAAkB8B,EAAKM,QACvB,cAACnC,EAAD,UAAiB6B,EAAKa,OACtB,cAACzC,EAAD,CACEE,MAAO0B,EAAKc,aAAad,EAAKa,MAAvB,MACPE,QAAS,kBArCG,WAClB,IAAIC,EAAgB,eAAQhB,EAAKc,cACjCd,EAAKc,aAAad,EAAKa,MAAvB,OAAyCG,EAAiBhB,EAAKa,MAAtB,MASzCb,EAAKiB,aAAL,eAAuBjB,EAAKc,eA0BPI,aAOV,SAASC,EAAT,GAOX,IANFC,EAMC,EANDA,MACAxC,EAKC,EALDA,YACAC,EAIC,EAJDA,eACAiC,EAGC,EAHDA,aACAO,EAEC,EAFDA,UACAJ,EACC,EADDA,aAEA,OACE,eAACtD,EAAD,WACE,cAACgB,EAAD,CAAWC,YAAaA,EAAaC,eAAgBA,IACnC,IAAjBuC,EAAME,QACLF,EAAMG,KAAI,SAACC,EAAMvB,GAAP,OACR,cAAC,EAAD,CAEEY,KAAMW,EAAKX,KACXT,OAAQoB,EAAKC,IACbnB,MAAOkB,EAAKlB,MACZJ,WAAYsB,EAAKtB,WACjBY,aAAcA,EACdO,UAAWA,EACXJ,aAAcA,EACdhB,MAAOA,GARFA,S,+BC9DXyB,G,OAAW,WACf,IAAIb,EAAO,IAAI3B,KACXyC,EAAed,EAAKe,UAAY,EAEpCf,EAAKgB,QAAQF,GAEb,IAAIG,EAAsC,IAA3BjB,EAAKkB,oBAIpB,OAFAJ,EAAe,IAAIzC,KAAK2B,EAAOiB,KAKlB,SAASE,IACtB,MAA0BC,IAAMC,SAAS,MAAzC,mBAAOd,EAAP,KAAce,EAAd,KACMrB,EAAemB,IAAMG,OAAO,IAClC,EAAkCH,IAAMC,SAAS,IAAjD,mBAAOb,EAAP,KAAkBJ,EAAlB,KACA,EAAgCgB,IAAMC,UAAS,GAA/C,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BL,IAAMC,SAAS,MAAzC,mBAAOK,EAAP,KAAcC,EAAd,KAGA,EAAsCP,IAAMC,SAAS,CACnDR,IACA,IAAIxC,OAFN,mBAAON,EAAP,KAAoBC,EAApB,KA8CA,OApCAoD,IAAMQ,WAAU,WACd,IAAMC,EAAY9D,EAAY,GAAG+D,cAAcC,MAAM,UAAU,GACzDC,EAAUjE,EAAY,GAAG+D,cAAcC,MAAM,UAAU,GACvDE,EAAW,0GAAsGJ,EAAtG,qBAA4HG,GAEvIE,EAAS,uCAAG,gCAAAC,EAAA,+EAESC,MAAMH,EAAa,CACxCI,OAAQ,MACRC,KAAM,OACNC,QAAS,CAAE,eAAgB,sBALf,cAERC,EAFQ,gBAQKA,EAASC,OARd,UAQRC,EARQ,OAUTF,EAASG,GAVA,wBAWNjB,EAASgB,GAAQA,EAAKE,SAAYJ,EAASK,OACjDlB,EAASD,GAZG,kBAaLoB,QAAQC,OAAOrB,IAbV,QAgBdgB,EAAKM,SAAQ,SAACrC,GACPV,EAAagD,QAAQC,eAAevC,EAAKX,QAC5CC,EAAagD,QAAQtC,EAAKX,MAAQ,CAAEvC,OAAO,OAI/C6D,EAASoB,GACTjB,GAAY,GAvBE,kDAyBd0B,QAAQC,IAAR,MAzBc,0DAAH,qDA4BflB,MACC,CAACnE,IAEA2D,EACK,8BAAMA,EAAMkB,UACTpB,EAQR,cAAC6B,EAAA,EAAD,CAAsBC,YAAaC,IAAnC,SACE,qBAAKC,UAAU,MAAf,SACGjD,GACC,cAACD,EAAD,CACEC,MAAOA,EACPxC,YAAaA,EACbC,eAAgBA,EAChBiC,aAAcA,EAAagD,QAC3BzC,UAAWA,EACXJ,aAAcA,QAftB,cAACqD,EAAA,EAAD,CACE3E,GAAI,CAAE4E,SAAU,WAAYC,IAAK,MAAOC,KAAM,SC3EtD,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC9C,EAAD,MAEF0C,K","file":"static/js/main.965f0169.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { Heart } from \"@styled-icons/boxicons-regular\";\r\n\r\nconst ApodsContainerStyled = styled.div`\r\n  max-width: 900px;\r\n  margin: 20px auto;\r\n`;\r\n\r\nconst ApodContainerStyled = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n  background: linear-gradient(#f8f8f8, #fff);\r\n  box-shadow: 0 8px 16px -8px rgba(0, 0, 0, 0.4);\r\n  border-radius: 6px;\r\n  ${(props) => (props.apodIdx === 0 ? \"border-top-left-radius: 0;\" : null)}\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ApodInfoContainerStyled = styled.div`\r\n  text-align: left;\r\n  margin: 20px;\r\n\r\n  @media (max-width: 587px) {\r\n    margin: 15px 20px;\r\n  }\r\n`;\r\n\r\nconst ApodTitleStyled = styled.div`\r\n  font-size: 24px;\r\n  margin: 5px 0;\r\n\r\n  @media (max-width: 587px) {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nconst ApodDateStyled = styled.div`\r\n  font-size: 16px;\r\n  font-weight: 300;\r\n\r\n  @media (max-width: 587px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst HeartStyled = styled(Heart)`\r\n  width: 30px;\r\n  margin-top: 25px;\r\n  color: #696969;\r\n  cursor: pointer;\r\n\r\n  transition: transform 0.1s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n\r\n  @keyframes liked {\r\n    0% {\r\n      transform: scale(0.8);\r\n    }\r\n    50% {\r\n      transform: scale(1.1);\r\n    }\r\n    100% {\r\n      color: red;\r\n      transform: scale(1);\r\n    }\r\n  }\r\n\r\n  :active {\r\n    transform: scale(0.8);\r\n    color: red;\r\n  }\r\n\r\n  :hover {\r\n    color: #404040;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.liked &&\r\n    `\r\n      color: red; \r\n    \r\n      :hover { \r\n        color: red; \r\n      }\r\n\r\n      animation: liked 0.25s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n\r\n    `}\r\n\r\n  @media (max-width: 587px) {\r\n    width: 23px;\r\n  }\r\n`;\r\n\r\nexport {\r\n  ApodsContainerStyled,\r\n  ApodContainerStyled,\r\n  ApodDateStyled,\r\n  ApodInfoContainerStyled,\r\n  ApodTitleStyled,\r\n  HeartStyled\r\n};\r\n","import { styled } from \"@mui/system\";\r\nimport { css } from \"@emotion/react\";\r\n\r\n// Used specifically for a media query for when DateRangePicker component hits 918px to become centered\r\nconst DateRangeWrapperStyled = styled(\"div\")(css`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  @media (max-width: 918px) {\r\n    justify-content: space-between;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n  }\r\n`);\r\n\r\nconst TitleStyled = styled(\"div\")(css`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  font-size: 45px;\r\n  font-weight: 300;\r\n  background-color: #fff;\r\n  border-top-left-radius: 6px;\r\n  border-top-right-radius: 6px;\r\n  padding: 15px 20px;\r\n\r\n  @media (max-width: 918px) {\r\n    font-size: 40px;\r\n    width: 100%;\r\n    margin-bottom: 20px;\r\n    border-radius: 0;\r\n  }\r\n\r\n  @media (max-width: 587px) {\r\n    font-size: 34px;\r\n  }\r\n`);\r\n\r\nconst SubheadingStyled = styled(\"div\")(css`\r\n  font-size: 12px;\r\n  margin: 5px 0;\r\n`);\r\n\r\nexport { DateRangeWrapperStyled, TitleStyled, SubheadingStyled };\r\n","import TextField from \"@mui/material/TextField\";\r\nimport DateRangePicker from \"@mui/lab/DateRangePicker\";\r\nimport Box from \"@mui/material/Box\";\r\nimport React from \"react\";\r\nimport {\r\n  DateRangeWrapperStyled,\r\n  TitleStyled,\r\n  SubheadingStyled\r\n} from \"./DateRangeStyled\";\r\n\r\nexport default function DateRange({ enteredDate, setEnteredDate }) {\r\n  return (\r\n    <DateRangeWrapperStyled>\r\n      <TitleStyled>\r\n        Spacestagram\r\n        <SubheadingStyled>\r\n          Brought to you by NASA's Astronomy Picture of the Day (APOD) API\r\n        </SubheadingStyled>\r\n      </TitleStyled>\r\n      <DateRangePicker\r\n        startText=\"Start date\"\r\n        endText=\"End date\"\r\n        maxDate={new Date()}\r\n        value={enteredDate}\r\n        onChange={(newDate) => {\r\n          setEnteredDate(newDate);\r\n        }}\r\n        renderInput={(startProps, endProps) => (\r\n          <React.Fragment>\r\n            <TextField sx={{ background: \"#fff\" }} {...startProps} />\r\n            <Box sx={{ mx: 2 }}> to </Box>\r\n            <TextField sx={{ background: \"#fff\" }} {...endProps} />\r\n          </React.Fragment>\r\n        )}\r\n      />\r\n    </DateRangeWrapperStyled>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  ApodsContainerStyled,\r\n  ApodContainerStyled,\r\n  ApodDateStyled,\r\n  ApodInfoContainerStyled,\r\n  ApodTitleStyled,\r\n  HeartStyled\r\n} from \"./ApodsStyled\";\r\nimport DateRange from \"./DateRange\";\r\n\r\nconst Apod = ({ ...rest }) => {\r\n  const handleClick = () => {\r\n    let dateLikesRefCopy = { ...rest.dateLikesRef };\r\n    rest.dateLikesRef[rest.date][\"liked\"] = !dateLikesRefCopy[rest.date][\r\n      \"liked\"\r\n    ];\r\n    /* Frowned upon, however, a forced re-render is utilized in order \r\n    to update the useRef dateLikesRef when the heart is clicked. Usually, dateLikesRef would be in a useState in order\r\n    to update state naturally instead of through forced re-renders, however, useState does not \r\n    contain perpetual data through re-renders which is needed for dateLikesRef\r\n    so as to contain a perpetual reference of all liked photos regardless of date-range and\r\n    whether it changes or not. */\r\n    rest.setDateLikes({ ...rest.dateLikesRef });\r\n  };\r\n\r\n  return (\r\n    <ApodContainerStyled apodIdx={rest.index}>\r\n      {rest.media_type === \"image\" ? (\r\n        <img\r\n          src={rest.imgURL}\r\n          alt={rest.title}\r\n          style={{ width: \"100%\", margin: \"0 auto\" }}\r\n        />\r\n      ) : rest.media_type === \"video\" ? (\r\n        <iframe\r\n          src={rest.imgURL}\r\n          title={rest.title}\r\n          width=\"100%\"\r\n          height=\"400vw\"\r\n          frameBorder=\"0\"\r\n          allowFullScreen\r\n        ></iframe>\r\n      ) : null}\r\n      <ApodInfoContainerStyled>\r\n        <ApodTitleStyled>{rest.title}</ApodTitleStyled>\r\n        <ApodDateStyled>{rest.date}</ApodDateStyled>\r\n        <HeartStyled\r\n          liked={rest.dateLikesRef[rest.date][\"liked\"]}\r\n          onClick={() => handleClick()}\r\n        />\r\n      </ApodInfoContainerStyled>\r\n    </ApodContainerStyled>\r\n  );\r\n};\r\n\r\nexport default function Apods({\r\n  apods,\r\n  enteredDate,\r\n  setEnteredDate,\r\n  dateLikesRef,\r\n  dateLikes,\r\n  setDateLikes\r\n}) {\r\n  return (\r\n    <ApodsContainerStyled>\r\n      <DateRange enteredDate={enteredDate} setEnteredDate={setEnteredDate} />\r\n      {apods.length !== 0 &&\r\n        apods.map((apod, index) => (\r\n          <Apod\r\n            key={index}\r\n            date={apod.date}\r\n            imgURL={apod.url}\r\n            title={apod.title}\r\n            media_type={apod.media_type}\r\n            dateLikesRef={dateLikesRef}\r\n            dateLikes={dateLikes}\r\n            setDateLikes={setDateLikes}\r\n            index={index}\r\n          />\r\n        ))}\r\n    </ApodsContainerStyled>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Apods from \"./components/Apods\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DateFnsAdapter from \"@mui/lab/AdapterDateFns\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport \"./styles.css\";\n\n/* pastWeek() returns the date of 7 days previous of today's date */\nconst pastWeek = () => {\n  let date = new Date();\n  let pastWeekDate = date.getDate() - 7;\n\n  date.setDate(pastWeekDate);\n\n  let tzOffset = date.getTimezoneOffset() * 60000; // This helps prevent the timezone from being incorrect when using toISOString()\n\n  pastWeekDate = new Date(date - tzOffset);\n\n  return pastWeekDate;\n};\n\nexport default function App() {\n  const [apods, setApods] = React.useState(null);\n  const dateLikesRef = React.useRef({});\n  const [dateLikes, setDateLikes] = React.useState({});\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  // Initialize the dates for the date-range component\n  const [enteredDate, setEnteredDate] = React.useState([\n    pastWeek(),\n    new Date()\n  ]);\n\n  /* We start with a default date range that is 7 days up until now. Then this useEffect is \n  updated with a new date range based on the enteredDate dependency. In other words,\n  every time the user updates the state with a new date range they pick, the fetch API gets data according to\n  that new date range.\n  */\n  React.useEffect(() => {\n    const startDate = enteredDate[0].toISOString().match(/[\\d-]+/)[0];\n    const endDate = enteredDate[1].toISOString().match(/[\\d-]+/)[0];\n    const apodsAPIURL = `https://api.nasa.gov/planetary/apod?api_key=SqFFo6cwJlXTax6FWe2m1nB5TXGiN3LdkQku2hw4&start_date=${startDate}&end_date=${endDate}`;\n\n    const fetchApod = async () => {\n      try {\n        const response = await fetch(apodsAPIURL, {\n          method: \"GET\",\n          mode: \"cors\",\n          headers: { \"Content-Type\": \"application/json\" }\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          const error = (data && data.message) || response.status;\n          setError(error);\n          return Promise.reject(error);\n        }\n\n        data.forEach((apod) => {\n          if (!dateLikesRef.current.hasOwnProperty(apod.date)) {\n            dateLikesRef.current[apod.date] = { liked: false };\n          }\n        });\n\n        setApods(data);\n        setIsLoaded(true);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchApod();\n  }, [enteredDate]);\n\n  if (error) {\n    return <div>{error.message}</div>;\n  } else if (!isLoaded) {\n    return (\n      <CircularProgress\n        sx={{ position: \"absolute\", top: \"50%\", left: \"50%\" }}\n      />\n    );\n  } else {\n    return (\n      <LocalizationProvider dateAdapter={DateFnsAdapter}>\n        <div className=\"App\">\n          {apods && (\n            <Apods\n              apods={apods}\n              enteredDate={enteredDate}\n              setEnteredDate={setEnteredDate}\n              dateLikesRef={dateLikesRef.current}\n              dateLikes={dateLikes}\n              setDateLikes={setDateLikes}\n            />\n          )}\n        </div>\n      </LocalizationProvider>\n    );\n  }\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}